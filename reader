#! /usr/bin/bash

main() {
	case $1 in
		-h | --help) welcome ;;
		-v | --version) version ;;
		-r | --reset) init ;;
		*) preinit; reader $1 ;;
	esac
}

preinit() {
	# Temporary files destination

	reader_dir="$HOME/.reader"
	preprocess_dir="$HOME/.reader/preprocess/preprocess"
	basicchecks_dir="$HOME/.reader/preprocess/basicchecks"
	instancecheck_dir="$HOME/.reader/platform"
	minecraft_dir="$HOME/.reader/minecraft"
	ml_dir="$HOME/.reader/ml/mod"
}

init() {
	preinit
	if [ -d $reader_dir ]; then
		rm -r $reader_dir
	fi
	mkdir -p $preprocess_dir &
	mkdir -p $basicchecks_dir &
	mkdir -p $instancecheck_dir/{android,ios} &
	mkdir -p $minecraft_dir &
	mkdir -p $ml_dir &
	wait
	touch $preprocess_dir/{renderer,arch,fabric,fml,modlauncher,optifine} &
	touch $basicchecks_dir/{corruptgame,oom} &
	touch $instancecheck_dir/platform
	touch $instancecheck_dir/android/launcherversion &
	touch $instancecheck_dir/ios/{deviceinfo,device,platform,version} &
	touch $minecraft_dir/version &
	touch $ml_dir/{ml,mlversion,mcversion,modcount} &
	wait
}

welcome() {
	echo "The Ultimate Duyism Log Reader: Renewed"
	echo "Usage: $0 [OPTIONS] FILENAME"
	echo "Available options:"
	echo "-h or --help			Print this message"
	echo "-v or --version 			Print the version"
}

version() {
	echo "Version: 3.1.0-dev.3"
	echo "Timestamp: 2022-07-16 7:43 PM UTC+7"
}

reader() {
	if [ ! -r $1 ]; then
		echo "ERROR: The log file does not exist or is unreadable."
	elif [ ! -d $HOME/.reader ]; then
		init; sequence $1
	else
		sequence $1
	fi
}

sequence() {
	preprocess $1 &
	preprocess_basic_checks $1 &
	wait
	instance_check $1 > $reader_dir/1 &
	optifine $1 > $reader_dir/2 &
	modloader $1 > $reader_dir/3 &
	basic_checks $1 > $reader_dir/4 &
	wait
	for i in 1 2 3 4
	do
		if [[ ! -z $(< $reader_dir/$i) ]]; then
			echo "$(< $reader_dir/$i)" &
		fi
	done
	wait
}

preprocess() {
	# Should we preprocess without context?
	# It might introduce some unwanted overhead.
	renderer $(egrep -m 1 -o "POJAV_RENDERER=.*" $1 | cut -d '=' -f2) > $preprocess_dir/renderer &
	sed -n 4p $1 | cut -d ' ' -f2 | egrep 'arm64|x86_64|arm|x86' > $preprocess_dir/arch &
	echo "$(egrep -m 1 'Info: Selected Minecraft version:' $1 | cut -d ':' -f3)$(egrep -m 1 'Launching Minecraft' $1 | cut -d ' ' -f3)" | cut -d ' ' -f 2- > $minecraft_dir/version &
	# Prepare for everything
	egrep -m 1 -n -o "Loading Minecraft .* with .* Loader .*" $1 > $preprocess_dir/fabric &
	egrep -m 1 -o "Forge Mod Loader version .* for Minecraft .* loading" $1 > $preprocess_dir/fml &
	egrep -m 1 -o "Forge mod loading, version .*, for MC .* with MCP .*" $1 > $preprocess_dir/modlauncher &
	egrep -m 1 -o "OptiFine_.*_HD_U_.*" $1 > $preprocess_dir/optifine &
	wait
}

preprocess_basic_checks() {
	grep -m 1 "Could not find or load main class net.minecraft.client.main.Main" $1 > $basicchecks_dir/corruptgame &
	grep -m 1 "java.lang.OutOfMemoryError" $1 > $basicchecks_dir/oom &
	wait
}

renderer() {
	case $1 in
		opengles2) echo "gl4es" ;;
		opengles3_virgl) echo "virgl" ;;
		opengles3_vgpu) echo "vgpu" ;;
	esac
}

instance_check() {
	if [ ! -z "$(< $preprocess_dir/arch)" ]; then
		echo "Platform: Android, $(< $preprocess_dir/arch)"
		sed -n 2p $1 | cut -d ' ' -f4 > $instancecheck_dir/android/launcherversion
		wait
		echo "Launcher version: $(< $instancecheck_dir/android/launcherversion)"
		echo "Renderer: $(< $preprocess_dir/renderer)"
		echo "Minecraft version: $(< $minecraft_dir/version)"
	else
		sed -n 1p $1 > $instancecheck_dir/ios/deviceinfo
		cut -d ' ' -f5 $instancecheck_dir/ios/deviceinfo > $instancecheck_dir/ios/device
		cut -d ' ' -f7 $instancecheck_dir/ios/deviceinfo > $instancecheck_dir/ios/platform &
		cut -d ' ' -f8 $instancecheck_dir/ios/deviceinfo > $instancecheck_dir/ios/version &
		if [ -r ./ios_devices.txt ]; then
			device=$(grep -m 1 $(< $instancecheck_dir/ios/deviceinfo) ./ios_devices.txt | cut -d ':' -f2)
			echo "Device:$device"
		else
			echo "Device: $(< $instancecheck_dir/ios/device)"
		fi &
		wait
		echo "Platform: $(< $instancecheck_dir/ios/platform), version $(< $instancecheck_dir/ios/version), arm64"
		echo "Minecraft version: $(< $minecraft_dir/version)"
	fi
}

optifine() {
	if [ ! -z "$(< $preprocess_dir/optifine)" ]; then
		echo "OptiFine version $(< $preprocess_dir/optifine)"
	fi
}

modloader() {
	if [ ! -z "$(< $preprocess_dir/fabric)" ]; then
		cut -d ' ' -f3 $preprocess_dir/fabric > $ml_dir/ml &
		cut -d ' ' -f5 $preprocess_dir/fabric > $ml_dir/mlversion &
		cut -d ' ' -f7 $preprocess_dir/fabric > $ml_dir/mcversion &
		sed -n "$(($(cut -d ':' -f1 $preprocess_dir/fabric)+1))p" $1 | egrep -o "Loading .* mods" | cut -d ' ' -f2 > $ml_dir/modcount &
		wait
		echo "Mod Loader: $(< $ml_dir/ml), version $(< $ml_dir/mlversion) for Minecraft $(< $ml_dir/mcversion)"
		if [ ! -z $ml_dir/modcount ]; then
			echo "Mod count: $(< ml_dir/modcount)"
		fi
#	TODO: Adapt this to older versions (... Minecraft client: 1.3.2, server: 1.3.2 loading)
	elif [ ! -z "$(< $preprocess_dir/fml)" ]; then
		cut -d ' ' -f5 $preprocess_dir/fml > $ml_dir/mlversion &
		cut -d ' ' -f8 $preprocess_dir/fml > $ml_dir/mcversion &
		egrep -m 1 -o "Forge Mod Loader has successfully loaded .* mods|Forge Mod Loader has identified .* mods to load" $1 | tr -dc '0-9' > $ml_dir/modcount &
		wait
		echo "Mod Loader: Forge, version $(< $ml_dir/mlversion) for Minecraft $(< $ml_dir/mcversion)"
		if [ ! -z $ml_dir/modcount ]; then
			echo "Mod count: $(< $ml_dir/modcount)"
		fi
#	Forge, but for 1.13+
#	The Mod Launcher don't give us the mod count. Attempting to do it is a waste of time.
	elif [ ! -z "$(< $preprocess_dir/modlauncher)" ]; then
		cut -d ' ' -f5 $preprocess_dir/modlauncher | cut -d ',' -f1 > $ml_dir/mlversion &
		cut -d ' ' -f8 $preprocess_dir/modlauncher > $ml_dir/mcversion &
		wait
		echo "Mod Loader: Forge, version $(< $ml_dir/mlversion) for Minecraft $(< $ml_dir/mcversion)"
	fi
#	TODO: Add more mod loaders
}

basic_checks() {
	if [ ! -z "$(< $basicchecks_dir/corruptgame)" ]; then
		echo "Error description: Game files are corrupt."
		echo "Solution: Delete all the files in .minecraft/versions/$(< $minecraft_dir/version) and try again."
	elif [ ! -z "$(< $basicchecks_dir/oom)" ]; then
		echo "Error description: Out of error (run time)."
		echo "Solution: Increase the memory allocation for the game."
	fi
}

main $@

